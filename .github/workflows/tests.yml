name: 🧪 tests

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      library:
        required: true
        type: string
      coverage:
        required: true
        type: boolean

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolchain: gcc
            compiler_version: 11
            compiler: g++-11
            os: ubuntu-22.04
            standard_library: libstdc++
            install_name: g++-11
            enable_coverage: ${{ inputs.coverage }}

          - toolchain: clang
            compiler_version: 14
            compiler: clang++
            os: ubuntu-22.04
            standard_library: libc++
            install_name: clang-14
            enable_coverage: false

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: 📥 Update APT
        run: sudo apt update

      - name: 📥 Install ${{ matrix.install_name }}
        run: sudo apt install ${{ matrix.install_name }} build-essential

      - name: 📥 Install CMake + Conan + GCovr
        run: pip3 install --upgrade cmake conan gcovr

      - name: 📡 Add `libhal-trunk` conan remote
        run: conan remote add libhal-trunk
             https://libhal.jfrog.io/artifactory/api/conan/trunk-conan --insert

      - name: 📡 Enable conan revision mode
        run: conan config set general.revisions_enabled=True

      - name: 📡 Create and setup default profile
        run: |
            conan profile new default --detect
            conan profile update settings.build_type=Debug default
            conan profile update \
              settings.compiler.libcxx=${{ matrix.standard_library }} default
            conan profile update \
              settings.compiler=${{ matrix.toolchain }} default
            conan profile update \
              settings.compiler.version=${{ matrix.compiler_version }} default

      - name: 📦 Build and Install Package
        run: conan create . -r=libhal-trunk --update -pr:b=default
                -e CXX=${{ matrix.compiler }}

      - name: 📂 Create build directory
        working-directory: tests
        run: mkdir -p build

      - name: 📥 Install conan dependencies
        working-directory: tests/build
        run: conan install .. -r=libhal-trunk --update
                -e CXX=${{ matrix.compiler }}

      - name: 🏗️ Run CMake
        working-directory: tests/build
        run: cmake .. -D CMAKE_CXX_COMPILER=${{ matrix.compiler }}

      - name: 🏗️ Run Make
        working-directory: tests/build
        run: make -j unit_test

      - name: 🔬 Build & Run Unit Tests
        working-directory: tests/build
        run: ./unit_test

      # Do code coverage work

      - name: 🔎 Generate Code Coverage
        if: ${{ matrix.enable_coverage }}
        working-directory: tests/build
        run: mkdir coverage/ && python3 -m gcovr
             --root ../../
             --exclude ".*/third_party/.*"
             --cobertura coverage/coverage.xml
             --html coverage/index.html --html-details
             --sort-percentage

      - name: Coverage Summary
        if: ${{ matrix.enable_coverage }}
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: tests/build/coverage/coverage.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '25 80'

      - name: Extract & Save Coverage SVG
        if: ${{ matrix.enable_coverage }}
        run: wget
             $(cat code-coverage-results.md |
               grep -Eo 'https://img.shields.io/badge/[^)]*')
              -O tests/build/coverage/coverage.svg

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.enable_coverage }}
        with:
          name: coverage
          retention-days: 1
          path: tests/build/coverage/

  mac:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolchain: clang
            compiler_version: 14
            compiler: clang++
            os: macos-12
            standard_library: libc++
            install_name:

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: 📥 Install ${{ matrix.install_name }}
        if: ${{ matrix.install_name }}
        run: brew install ${{ matrix.install_name }}

      - name: 📥 Install CMake + Conan + GCovr
        run: pip3 install --upgrade cmake conan gcovr

      - name: 📡 Add `libhal-trunk` conan remote
        run: conan remote add libhal-trunk
             https://libhal.jfrog.io/artifactory/api/conan/trunk-conan --insert

      - name: 📡 Enable conan revision mode
        run: conan config set general.revisions_enabled=True

      - name: 📡 Create and setup default profile
        run: |
            conan profile new default --detect
            conan profile update settings.build_type=Debug default
            conan profile update \
              settings.compiler.libcxx=${{ matrix.standard_library }} default
            conan profile update \
              settings.compiler=${{ matrix.toolchain }} default
            conan profile update \
              settings.compiler.version=${{ matrix.compiler_version }} default

      - name: 📦 Build and Install Package
        run: conan create . -r=libhal-trunk --update -pr:b=default
                -e CXX=${{ matrix.compiler }}

      - name: 📂 Create build directory
        working-directory: tests
        run: mkdir -p build

      - name: 📥 Install conan dependencies
        working-directory: tests/build
        run: conan install .. -r=libhal-trunk --update
                -e CXX=${{ matrix.compiler }}

      - name: 🏗️ Run CMake
        working-directory: tests/build
        run: cmake .. -D CMAKE_CXX_COMPILER=${{ matrix.compiler }}

      - name: 🏗️ Run Make
        working-directory: tests/build
        run: make -j unit_test

      - name: 🔬 Build & Run Unit Tests
        working-directory: tests/build
        run: ./unit_test
